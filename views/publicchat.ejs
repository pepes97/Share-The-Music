
<!doctype html>
<html lang='en'>

<head>
  <meta charset='UTF-8'>
  <title>Chat concerti</title>

  <script src="https://use.typekit.net/ama5eep.js"></script>


  <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js'></script>
  <link rel="stylesheet"
        href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/base/jquery-ui.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>

  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"
          integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU="
          crossorigin="anonymous"></script>

  <script src='/socket.io/socket.io.js'></script>


  <style media="screen">

  * {
    box-sizing: border-box;
  }
  *:focus{
    outline: none;
  }

  html {
    font-weight: 200;
    -webkit-font-smoothing: antialiased;
  }

  html, input {
    font-family:

      'HelveticaNeue-Light',
      'Helvetica Neue Light',
      'Helvetica Neue',
      Helvetica,
      Arial,
      'Lucida Grande',
      sans-serif;
  }

  html, body {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  ul {
    list-style: none;
    word-wrap: break-word;
  }

  ul.roomList {
    list-style: circle;
  }

  /* Pages */

  .pages {
    font-family: "source-han-sans-traditional",sans-serif;
    height: 100%;
    margin: 0;
    padding: 0;
    width: 100%;
  }

  .page {
    border: #525252 solid 2px;
    height: 100%;
    position: absolute;
    width: 100%;
  }

  /* Login Page */
  .login.page .form .usernameInput {
    font-weight: bold;
    background-color: transparent;
    border: none;
    border-bottom: 2px solid #367ABD;
    outline: none;
    padding-bottom: 10px;
    text-align: center;
    width: 30%;
  }


  .login.page .usernameInput {
    color: black;
    font-size: 200%;
    font-weight: bold;
    letter-spacing: 3px;
  }

  /* Chat page */

  .chat.page {
    background-color: #fffad3;
    display: none;
  }

  /* Font */

  .messages {
    font-size: 120%;
    color: white;

  }

  .inputMessage {
    font-size: 100%;
  }

  .log {
    color: gray;
    font-size: 100%;
    margin: 10px;
    text-align: center;
  }

  /* Messages */

  .chat.page {
    width: 75%;
  }

  .chatArea {
    height: 100%;
    padding-bottom: 100px;
    background-color: #333;
  }

  .messages {
    height: 100%;
    margin: 0;
    overflow-y: scroll;
    padding: 10px 20px 10px 20px;
  }

  .message.typing .messageBody {
    color: gray;
  }

  .username {
    font-weight: 700;
    overflow: hidden;
    padding-right: 10px;
    text-align: right;
  }

  /* Input */

  .inputMessage {
    background-color: #fffad3;
    border: 4px solid gray;
    bottom: 0;
    height: 60px;
    left: 0;
    outline: none;
    padding-left: 10px;
    position: absolute;
    right: 0;
    width: 100%;
  }

  /* Rooms */

  .room.page {
    background-color: beige;
    display: none;
    height: 100%;
    margin-left: 75%;
    text-align: center;
    width: 25%;
  }

  .room.page .room-title {
    border-bottom: #3d3d3d solid 2px;
    color: #3d3d3d;
    font-size: 200%;
    font-weight: bold;
    padding: -10px 0 20px 0;
  }
  .room.page .room-hint {
    color: #3d3d3d;
    font-size: 120%;
    margin: 0;
    text-align: center;
    padding: 0;
  }
  .room.page .room-list {
    max-height: 80%;
    overflow-y: scroll;
    position: absolute;
    text-align: left;
    width: 100%;
  }

  div.room {
    border: #3d3d3d solid 2px;
    border-radius: 15px;
    color: #3d3d3d;
    font-size: 150%;
    font-weight: bold;
    margin: 10px 10px 10px -20px;

    /* Let text not exceed <div> */
    overflow: auto;
    padding: 10px 10px;
    transition: 0.3s;
  }

  div.room:hover {
    background: firebrick;
    color: white;
    cursor: pointer;
  }

  .joined-room {
    background: firebrick !important;
    color: white !important;
    cursor: pointer !important;
  }

  .user-number-in-room {
    float: right;
  }
  /* Tool buttons */

  .btn {
    background-color: transparent;
    border: #367ABD solid 0.12em;
    border-radius: 100em;
    cursor: pointer;
    color: #367ABD;
    display: block;
    font-size: 100%;
    font-weight: bold;
    height: 40px;
    overflow: auto;
    padding: 0;
    position: absolute;
    text-align: center;
    transition-delay: 0s;
    transition-duration: 0.3s;
    transition-property: all;
    vertical-align: top;
    width: 40px;
  }

  .btn:hover {
    background-color: #367ABD;
    border: #3d3d3d solid 0.12em;
    color: #fffad3;
  }

  .btn:active {
    background-color: #3d3d3d;
    border: #367ABD solid 0.12em;
    color: #fffad3;
    transition-duration: 0s;
  }

  .btn.btn-tips {
    right: 2em;
    top: 1em;
  }
  /* Tool slides */

  .ui-tips {
    background-color: whitesmoke;
    border: #666666 solid 0.1em;
    border-radius: 15px;
    display: none;
    float: left;
    width: 26em;
    height: 24em;
    overflow: auto;
    position: absolute;
    right: 3em;
    top: 7em;
  }
  .tips-title {
    background-color: lightgrey;
    border-radius: 15px 15px 0 0;
    margin: 0;
    padding: 0.1em;
    text-align: center;
  }

  .tips h4 {
    margin: 1%;
  }

  .tips {
    color: #3d3d3d;
    margin: 2%;
  }

  </style>
</head>
<!-- CHAT PUBBLICA  -->
<body>
<!-- Utilizzato per settare il nickname dell utente autenticato. (non visibile all utente)-->
  <ul class='pages' id='all-page'>

    <li class='chat page' id='chat-page'>
      <div class='chatArea'>
        <ul class='messages'></ul>
      </div>

      <button class='btn btn-tips' >?</button>

      <div id='effect-tips' class='ui-tips'>
        <h3 class='tips-title'> Suggerimenti </h3>
        <div class='tips'>
          <h3>Comandi</h3>
          <h4> Comando per creare nuova chatroom : /join [Nome della chat]</h4>
          "(La lunghezza del nome della chat è compresa tra 1 e 14 caratteri)" <br><br>
          <h4>Comando refresh la lista della chat : /ls</h4>
          （Si refrescia automaticamente ogni 30 secondi, quando utente entra o esce dalla chat viene refrescia immediatamente）<br>

        </div>
      </div>

      <input class='inputMessage' placeholder='Scrivi qualcosa...'/>
      </li>


    <li class='login page' id='login-page'>

          <input class='usernameInput' type='text' minlength='1' maxlength='14'
                 value="<%= username %>" autofocus readonly/>
    </li>

    <li class='room page' id='room-page'>
      <h1 class='room-title'>Lista di ChatRooms</h1>
      <p class='room-hint'>Clicca su una di esse per entrare!</p>
      <ul class='room-list'></ul>
    </li>

  </ul>
  <script>

  $(function() {
    var FADE_TIME = 150;
    var TYPING_TIMER_LENGTH = 400;
    var COLORS = [
      '#e21400', '#91580f', '#f8a700', '#f78b00',
      '#58dc00', '#287b00', '#008dff', '#4ae8c4',
      '#3b88eb', '#3824aa', '#a700ff', '#d300e7',
      '#CC9014', '#FF6C00', '#7900ff', '#14CC78',
      '#001bff', '#00b2d8', '#7900ff', '#00d877',
      '#4d7298', '#795da3', '#f47577', '#db324d',
      '#EE4035', '#F3A530', '#56B949', '#30499B',
      '#F3A530', '#56B949', '#844D9E', '#4e1c81'
    ];

    //  Username che prendo in usernameInput
    var $window = $(window);
    var $usernameInput = $('.usernameInput'); // Input for username
    var $messages = $('.messages'); // Messages area
    var $inputMessage = $('.inputMessage'); // Input message input box

    var $loginPage = $('.login.page'); // login page
    var $chatPage = $('.chat.page'); // Chat room page
    var $roomPage = $('.room.page'); // Room list page
    var $roomList = $('.room-list'); // Room list <ul>
    var $btnTips = $('.btn-tips'); // Tool buttons

    // Setto username
    var username;
    var connected = false;
    var typing = false;
    var lastTypingTime;
    //var $currentInput = $usernameInput.focus();
    var $roomDiv;
    var roomNameRule = /^(?!\s*$)[a-zA-Z0-9_\u4e00-\u9fa5 \f\n\r\t\v]{1,14}$/;

    var socket = io({transports: ['websocket']});

    function addParticipantsMessage (data) {
      var message;
      if (!data.userJoinOrLeftRoom) {
        if (data.numUsers === 1) {
          message = 'Sei da solo！';
        } else {
          message = 'Ci sono ' + data.numUsers + ' utenti nella chat ';
        }
      }
      log(message);
    }

    // Sets the client's username
    //function setUsername () {
      // trim(): rimuove gli spazi bianchi inizio e fine frase

      username = cleanInput($usernameInput.val().trim());
        $loginPage.hide();
        $chatPage.show();
        $roomPage.fadeIn();
        $loginPage.off();
        //$currentInput = $inputMessage.focus();

        // Dico al server di aggiungere username
        socket.emit('add user', username);

    //}

    // Invio un messaggio in chat
    function sendMessage () {
      var message = $inputMessage.val();
      // Faccio un clean dell'inputText
      message = cleanInput(message);
      // Se il messaggio non è vuoto esegui
      if (connected) {
        $inputMessage.val('');
        if (message.charAt(0) !== '/') {
          addChatMessage({
            username: username,
            message: message
          });
          // Dico al server di inviare il messaggio sulla socket
          socket.emit('new message', message);

          // If input a command with '/'.
        } else {
          inputCommand(message);
        }
      }
    }

    // Invio un comando
    function inputCommand (message) {
      var words = message.split(' ');
      var cmd = words[0]
        .substring(1, words[0].length)
        .toLowerCase();

      switch (cmd) {
        // Command /join [room name] = join room.
        case 'join':
          words.shift();
          var room = words.join(' ');
          if (roomNameRule.test(room)) {
            socket.emit('join room', room);
            $roomList[0].scrollTop = $roomList[0].scrollHeight;
          } else {
            log('Lunghezza chat limitata tra 1 e 14 caratteri', {})
          }
          break;

        // Command /ls = reload room list.
        case 'ls':
          socket.emit('room list');
          break;

        default:
          message = 'Hai inserito un comando non valido';
          log(message);
          break;
      }
    }

    // Log del messaggio
    function log (message, options) {
      options = options || {};
      var $logDiv;

      // Se l'evento è definito (ex: join)
      if (typeof options.userConnEvent !== 'undefined') {
        var userName = options.username;
        // setta il colore del nickname
        var colorOfUserName = getUsernameColor(userName);
        var $usernameDiv = $('<span class="username">')
          .text(userName)
          .css('color', colorOfUserName);
         // aggiunge usernameDiv al messaggio
        $logDiv = $('<li>')
          .addClass('log')
          .append($usernameDiv, message);
        addMessageElement($logDiv, options);
      } else {
        // per messaggio errore
        $logDiv = $('<li>').addClass('log').text(message);
        addMessageElement($logDiv, options);
      }
    }

    // Aggiunge messaggio alla chat
    function addChatMessage (data, options) {
      // Non oscurare messaggio quando un utente
      // sta scrivendo
      var $typingMessages = getTypingMessages(data);
      options = options || {};
      if ($typingMessages.length !== 0) {
        options.fade = false;
        $typingMessages.remove();
      }

      var userName = data.username;
      var colorOfUserName = getUsernameColor(userName);
      if (data.typing !== true) {
        userName += ': ';
      }
      if (data.message !== ''){
        var $usernameDiv = $('<span class="username"/>')
          .text(userName)
          .css('color', colorOfUserName);
        var $messageBodyDiv = $('<span class="messageBody">')
          .text(data.message);

        var typingClass = data.typing ? 'typing' : '';
        var $messageDiv = $('<li class="message"/>')
          .data('username', userName)
          .addClass(typingClass)
          .append($usernameDiv, $messageBodyDiv);

        addMessageElement($messageDiv, options);
      }
    }

    // Sta scrivendo..
    function addChatTyping (data) {
      data.typing = true;
      data.message = 'Sta scrivendo...';
      addChatMessage(data);
    }

    // Non sta scrivendo più
    function removeChatTyping (data) {
      getTypingMessages(data).fadeOut(function () {
        $(this).remove();
      });
    }

    // Aggiungi un elemento del messaggio
    function addMessageElement (el, options) {
      var $el = $(el);

      // default options
      if (!options) {
        options = {};
      }
      if (typeof options.fade === 'undefined') {
        options.fade = true;
      }
      if (typeof options.prepend === 'undefined') {
        options.prepend = false;
      }

      // options
      if (options.fade) {
        $el.hide().fadeIn(FADE_TIME);
      }
      if (options.prepend) {
        $messages.prepend($el);
      } else {
        $messages.append($el);
      }

      $messages[0].scrollTop = $messages[0].scrollHeight;
    }

    // Pulisce InputText
    function cleanInput (input) {
      return $('<div/>').text(input).text();
    }

    // Aggiorna evento 'Sta Scrivendo'
    function updateTyping () {
      if (connected) {
        if (!typing) {
          typing = true;
          socket.emit('typing');
        }
        lastTypingTime = (new Date()).getTime();

        setTimeout(function () {
          var typingTimer = (new Date()).getTime();
          var timeDiff = typingTimer - lastTypingTime;
          if (timeDiff >= TYPING_TIMER_LENGTH && typing) {
            socket.emit('stop typing');
            typing = false;
          }
        }, TYPING_TIMER_LENGTH);
      }
    }

    // Prende che l'utente X sta scrivendo
    function getTypingMessages (data) {
      return $('.typing.message').filter(function () {
        return $(this).data('username') === data.username;
      });
    }

    // Setta il colore al Nickname
    function getUsernameColor (username) {
      var eachCharCode = 0;
      var randIndex;
      for (var ii = 0; ii < username.length; ii++) {
        eachCharCode += username.charCodeAt(ii);
      }
      randIndex = Math.abs(eachCharCode % COLORS.length);
      return COLORS[randIndex];
    }

    $window.keydown(function (event) {
      // Evento utente clicca su INVIO (finito di scrivere)
      if (event.which === 13) {
        if (username) {
          sendMessage();
          socket.emit('stop typing');
          typing = false;
        } else{
          username = cleanInput($usernameInput.val().trim());
            $loginPage.hide();
            $chatPage.show();
            $roomPage.fadeIn();
            $loginPage.off();
            //$currentInput = $inputMessage.focus();

            // Dico al server di aggiungere username
            socket.emit('add user', username);
        }
      }
    });

    $inputMessage.on('input', function() {
      updateTyping();
    });

    // Jquery invioMessaggio
    $inputMessage.click(function () {
      $inputMessage.focus();
    });

    // Ogni volta che l'utente si logga, il server fa comparire il messaggio iniziale
    socket.on('login', function (data) {
      connected = true;
      // Messaggio iniziale
      var message = ' Benvenuto, scegli la tua CHAT ';
      log(message, {
        prepend: true
      });
      addParticipantsMessage(data);
    });

    // Azione del server quando un utente manda messaggio
    socket.on('new message', function (data) {
      addChatMessage(data);
    });

    // Azione del server quando un utente entra
    socket.on('user joined', function (data) {
      log(data.logAction + data.logLocation + data.roomName, {
        userConnEvent: true,
        username: data.username
      });
      addParticipantsMessage(data);
      socket.emit('room list');
    });

    // Azione del server quando un utente esce
    socket.on('user left', function (data) {
      log(data.logAction + data.logLocation + data.roomName, {
        userConnEvent: true,
        username: data.username
      });
      addParticipantsMessage(data);
      removeChatTyping(data);
      // Riaggiorno la room-list
      socket.emit('room list');
    });

    // Azione del server quando un utente sta scrivendo
    socket.on('typing', function (data) {
      addChatTyping(data);
    });

    // Azione del server quando un utente non sta scrivendo
    socket.on('stop typing', function (data) {
      removeChatTyping(data);
    });

    socket.on('disconnect', function () {
      log('Sei disconnesso');
      // Riaggiorno la room-list
      socket.emit('room list');
    });

    socket.on('reconnect', function () {
      log('Sei riconnesso');
      if (username) {
        socket.emit('add user', username);
        // Riaggiorno la room-list
        socket.emit('room list');
      }
    });

    socket.on('reconnect_error', function () {
      log('Riconnessione fallita...');
    });

    // Mostra l'attuale room-list
    socket.on('show room list', function (room, rooms) {
      $roomList.empty();
      var roomClassName = room.trim().toLowerCase().replace(/\s/g,'');

      $.each(rooms, function (roomName, numUserInRoom) {
        // Controlli per pulire il nome della room
        var className = roomName.trim().toLowerCase().replace(/\s/g,'');
        $roomDiv = $('<div class="room"></div>')
          .html('<b>' + roomName + '</b>'
            + '<span class="user-number-in-room">'
            + '(' + numUserInRoom + 'utenti' + ')' + '</span>')
          .addClass(className)
          .click(function () {
            socket.emit('join room', roomName);
            $inputMessage.focus();
          });
        $roomList.append($roomDiv);
      });

      $('.' + roomClassName).addClass('joined-room');
    });

    socket.on('join left result', function (data) {
      log(data.username + data.logAction
        + data.logLocation + data.roomName, {});
    });

    // Ogni 30 sec riaggiorno la room-list
    setInterval(function () {
      socket.emit('room list');
    }, 30000);


    // jQuery per lo stile
    $roomList.sortable();
    $btnTips.tooltip();
    $btnTips.on( "click", function() {
      $('#effect-tips').toggle('blind');
    });
  });

  </script>

</body>
</html>
